{
	"info": {
		"_postman_id": "898470cc-7431-473a-a9c9-4b250b91ebf8",
		"name": "booktrader",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test reset",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{hostTest}}/api/test/reset",
					"host": [
						"{{hostTest}}"
					],
					"path": [
						"api",
						"test",
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsupported API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 404', () => {",
							"    pm.response.to.have.status (404);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/api/nothing",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"nothing"
					]
				}
			},
			"response": []
		},
		{
			"name": "User: Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@example.com\",\n    \"username\": \"test\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "User: Login new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('user key to be 4, username, email match', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.key).to.eq (4);",
							"    pm.expect (data.email).to.eq ('test@example.com');",
							"    pm.expect (data.username).to.eq ('test');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"test\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User: Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unauth: Get books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('count to be 3', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data).length (3);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/books",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login (a)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('user key to be 4, username, email match', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data.username).to.eq ('a');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"a\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('verify book content', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        owner: 1,",
							"        category: 'Test',",
							"        title: 'Test Title',",
							"        author: 'Author Test',",
							"        cover: 'https://www.example.com/test.jpg',",
							"        requester: 0,",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"category\": \"Test\",\n    \"title\": \"Test Title\",\n    \"author\": \"Author Test\",\n    \"cover\": \"https://www.example.com/test.jpg\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get books, verify addition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('book count to be 4', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data).length (4);",
							"})",
							"",
							"pm.test ('new book exists, with have expected data', () => {",
							"    var data = pm.response.json ();",
							"    var t = data.find ((a) => a.title === 'Test Title');",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        owner: 1,",
							"        category: 'Test',",
							"        title: 'Test Title',",
							"        author: 'Author Test',",
							"        cover: 'https://www.example.com/test.jpg',",
							"        requester: 0,",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/books",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('updated book content', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        owner: 1,",
							"        category: 'Category U',",
							"        title: 'Title U',",
							"        author: 'Author U',",
							"        cover: 'https://www.example.com/u.jpg',",
							"        requester: 0,",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"category\": \"Category U\",\n    \"title\": \"Title U\",\n    \"author\": \"Author U\",\n    \"cover\": \"https://www.example.com/u.jpg\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books/4",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get books, verify update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('book count to be 4', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data).length (4);",
							"})",
							"",
							"pm.test ('updated book exists, with have expected data', () => {",
							"    var data = pm.response.json ();",
							"    var t = data.find ((a) => a.title === 'Title U');",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 4,",
							"        owner: 1,",
							"        category: 'Category U',",
							"        title: 'Title U',",
							"        author: 'Author U',",
							"        cover: 'https://www.example.com/u.jpg',",
							"        requester: 0,",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/books",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('updated book content, added requester', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 3,",
							"        owner: 2,",
							"        category: 'C1',",
							"        title: 'T3',",
							"        author: 'A A',",
							"        cover: 'https://www.example.com/c.jpg',",
							"        requester: 1,",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books/3/request",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books",
						"3",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request book second time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('book content same as original request', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 3,",
							"        owner: 2,",
							"        category: 'C1',",
							"        title: 'T3',",
							"        author: 'A A',",
							"        cover: 'https://www.example.com/c.jpg',",
							"        requester: 1,",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books/3/request",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books",
						"3",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unrequest book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('updated book content, no requester', () => {",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t._id).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        _id: t._id,",
							"        key: 3,",
							"        owner: 2,",
							"        category: 'C1',",
							"        title: 'T3',",
							"        author: 'A A',",
							"        cover: 'https://www.example.com/c.jpg',",
							"        requester: 0,",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books/3/request",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books",
						"3",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request own book (error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 400, with suberror', () => {",
							"    pm.response.to.have.status (400);",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t.error).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        error: 'mybook',",
							"    });",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books/2/request",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books",
						"2",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request reserved book (error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 400, with suberror', () => {",
							"    pm.response.to.have.status (400);",
							"    var t = pm.response.json ();",
							"    pm.expect (t).to.not.be.undefined;",
							"    pm.expect (t.error).to.not.be.undefined;",
							"    pm.expect (t).to.deep.equal ({",
							"        error: 'requested',",
							"    });",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books/1/request",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books",
						"1",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/books/4",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get books, verify delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})",
							"",
							"pm.test ('book count to be 3', () => {",
							"    var data = pm.response.json ();",
							"    pm.expect (data).length (3);",
							"})",
							"",
							"pm.test ('deleted book does not exist', () => {",
							"    var data = pm.response.json ();",
							"    var t = data.find ((a) => a.title === 'Title U');",
							"    pm.expect (t).to.be.undefined;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/books",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout (a)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('status to be 200', () => {",
							"    pm.response.to.have.status (200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}